<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lhjl.tzzs.proxy.mapper.ProjectsMapper">
  <resultMap id="BaseResultMap" type="com.lhjl.tzzs.proxy.model.Projects">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="serial_number" jdbcType="INTEGER" property="serialNumber" />
    <result column="short_name" jdbcType="VARCHAR" property="shortName" />
    <result column="full_name" jdbcType="VARCHAR" property="fullName" />
    <result column="kernel_desc" jdbcType="VARCHAR" property="kernelDesc" />
    <result column="commet" jdbcType="VARCHAR" property="commet" />
    <result column="url" jdbcType="VARCHAR" property="url" />
    <result column="established_time" jdbcType="DATE" property="establishedTime" />
    <result column="segmentation" jdbcType="VARCHAR" property="segmentation" />
    <result column="item_label" jdbcType="VARCHAR" property="itemLabel" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="territory" jdbcType="VARCHAR" property="territory" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="continent" jdbcType="VARCHAR" property="continent" />
    <result column="country" jdbcType="VARCHAR" property="country" />
    <result column="province" jdbcType="VARCHAR" property="province" />
    <result column="city" jdbcType="VARCHAR" property="city" />
    <result column="region" jdbcType="VARCHAR" property="region" />
    <result column="investment_institutions_id" jdbcType="INTEGER" property="investmentInstitutionsId" />
    <result column="approval_status" jdbcType="INTEGER" property="approvalStatus" />
    <result column="approval_time" jdbcType="TIMESTAMP" property="approvalTime" />
    <result column="yn" jdbcType="INTEGER" property="yn" />
    <result column="userid" jdbcType="INTEGER" property="userid" />
    <result column="kernel_desc_status" jdbcType="INTEGER" property="kernelDescStatus" />
    <result column="city_count" jdbcType="INTEGER" property="cityCount" />
    <result column="evaluation_recommend" jdbcType="DOUBLE" property="evaluationRecommend" />
    <result column="project_type" jdbcType="INTEGER" property="projectType" />
    <result column="project_source" jdbcType="INTEGER" property="projectSource" />
    <result column="project_logo" jdbcType="VARCHAR" property="projectLogo" />
    <result column="project_investment_highlights" jdbcType="VARCHAR" property="projectInvestmentHighlights" />
    <result column="city_count_max" jdbcType="INTEGER" property="cityCountMax" />
    <result column="city_count_min" jdbcType="INTEGER" property="cityCountMin" />
    <result column="total_amount" jdbcType="DECIMAL" property="totalAmount" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="company_email" jdbcType="VARCHAR" property="companyEmail" />
    <result column="company_hr_email" jdbcType="VARCHAR" property="companyHrEmail" />
    <result column="foreign_investment_yn" jdbcType="INTEGER" property="foreignInvestmentYn" />
  </resultMap>
  
  <resultMap id="ProjectsListOutputDtoMap" type="com.lhjl.tzzs.proxy.dto.ProjectsListOutputDto">
  	<result column="ID" jdbcType="INTEGER" property="id" />
  	<result column="serial_number" jdbcType="INTEGER" property="serialNumber" />
  	<result column="short_name" jdbcType="VARCHAR" property="shortName" />
  	<result column="kernel_desc" jdbcType="VARCHAR" property="kernelDesc" />
  	<result column="city" jdbcType="VARCHAR" property="city" />
  	<result column="project_source" jdbcType="INTEGER" property="projectSource" />
  	<result column="rating_stage" jdbcType="INTEGER" property="ratingStage" />
  	<result column="stage" jdbcType="INTEGER" property="stage" />
  	
  	<result column="focuscount" jdbcType="INTEGER" property="focusCount" />
  	<result column="interviewcount" jdbcType="INTEGER" property="interviewCount" />
  	<result column="viewcount" jdbcType="INTEGER" property="viewCount" />
  	<result column="followstatus" jdbcType="INTEGER" property="followStatus" />
  	
  	<result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  	<result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  
  <resultMap id="ProjectsSimpleInfosMap" type="com.lhjl.tzzs.proxy.dto.ProInfoDto">
  	<result column="ID" jdbcType="INTEGER" property="id" />
  	<result column="short_name" jdbcType="VARCHAR" property="shortName" />
  	<result column="kernel_desc" jdbcType="VARCHAR" property="kernelDesc" />
  	<result column="segmentation" jdbcType="VARCHAR" property="segmentation" />
  	<result column="project_logo" jdbcType="VARCHAR" property="projectLogo" />
  	<result column="city" jdbcType="VARCHAR" property="city" />
  	<result column="stage" jdbcType="INTEGER" property="stage" />
  </resultMap>
  
  <select id="blurScanProjectByShortName" resultMap="BaseResultMap" parameterType="String">
  		select * from projects where 1=1 and short_name like "%"#{keyword}"%"
  </select>
  
  <select id="getProjectsSimpleInfos" resultMap="ProjectsSimpleInfosMap" parameterType="Integer">
  	SELECT p.ID,p.short_name,p.kernel_desc,p.segmentation,p.project_logo,p.city,case when a.financing_time is null then concat('正在融',a.stage) else a.stage end stage
	FROM
	    (SELECT * 
	    FROM project_financing_log
	    WHERE stage IN ('种子轮' , '天使轮', 'Pre-A轮') 
	    order by ISNULL(financing_time) desc ,financing_time desc 
	    ) a 
    LEFT JOIN projects p ON a.project_id = p.ID 
    where p.ID =#{projectId}
	GROUP BY p.short_name
  </select>
    <!-- 用户关注的项目 -->
	<select id="findSplit" parameterType="com.lhjl.tzzs.proxy.dto.ProjectsListInputDto" resultMap="ProjectsListOutputDtoMap">
     select p.ID,p.serial_number,p.short_name,p.kernel_desc,p.city,p.project_source,aprl.rating_stage,
		case when statemp.financing_time is null then concat('正在融',statemp.stage) else statemp.stage end stage,
		followtemp.focuscount,interviewtemp.interviewcount,proviewtemp.viewcount, pfs.meta_follow_status_id followstatus,
		p.create_time,p.update_time
		from projects p
		left join admin_project_rating_log aprl on p.ID = aprl.project_id 
		left join (select projects_id ,count(user_id) focuscount from follow  where status =1 group by projects_id) followtemp on p.ID = followtemp.projects_id
		left join (select projects_id ,count(user_id) interviewcount from interview group by projects_id) interviewtemp on p.ID = interviewtemp.projects_id
		left join (select project_id ,count(user_id) viewcount from project_views  where yn =1 group by project_id) proviewtemp on p.ID = proviewtemp.project_id
		left join project_follow_status pfs on p.ID = pfs.project_id
		right join (
					SELECT * FROM project_financing_log
					WHERE stage IN ('种子轮' , '天使轮', 'Pre-A轮')
				    order by ISNULL(financing_time) desc ,financing_time desc
    				) statemp on p.ID = statemp.project_id
		where 1=1 
		<if test="keyword !=null and keyword != ''">
			 and (p.short_name like "%"#{keyword}"%" or p.kernel_desc like "%"#{keyword}"%" or
			 p.city like "%"#{keyword}"%" or p.project_source like "%"#{keyword}"%")
		</if>
		<if test="projectSource !=null and projectSource != ''">
			and p.project_source = #{projectSource}
		</if>
		<!-- 项目等级 -->
		<if test="ratingStage !=null and ratingStage != ''">
			and aprl.rating_stage = #{ratingStage}
		</if>
		<!-- 融资状态 -->
		<if test="stage !=null and stage != ''">
			and statemp.stage = #{stage}
		</if>
		<if test="followStatus !=null and followStatus != ''">
			and pfs.meta_follow_status_id = #{followStatus}
		</if>
		GROUP BY p.short_name
		<if test="column !=null and column != '' and order != null and order != ''">
			order by ${column} ${order}
		</if>
		limit #{start},#{pageSize}
    </select>
    
    <select id="findSplitCount" parameterType="com.lhjl.tzzs.proxy.dto.ProjectsListInputDto" resultType="Long">
     	select count(*) from (select count(*) from projects p
		left join admin_project_rating_log aprl on p.ID = aprl.project_id 
		left join (select projects_id ,count(user_id) focuscount from follow  where status =1 group by projects_id) followtemp on p.ID = followtemp.projects_id
		left join (select projects_id ,count(user_id) interviewcount from interview group by projects_id) interviewtemp on p.ID = interviewtemp.projects_id
		left join (select project_id ,count(user_id) viewcount from project_views  where yn =1 group by project_id) proviewtemp on p.ID = proviewtemp.project_id
		left join project_follow_status pfs on p.ID = pfs.project_id
		right join (SELECT * FROM project_financing_log
				    WHERE stage IN ('种子轮' , '天使轮', 'Pre-A轮')
				    order by ISNULL(financing_time) desc ,financing_time desc
    				) statemp on p.ID = statemp.project_id
		where 1=1
		<if test="keyword !=null and keyword != ''">
			 and (p.short_name like "%"#{keyword}"%" or p.kernel_desc like "%"#{keyword}"%" or
			 p.city like "%"#{keyword}"%" or p.project_source like "%"#{keyword}"%")
		</if>
		<!-- <if test="city !=null and city != ''">
			and p.city = #{city}
		</if> -->
		<if test="projectSource !=null and projectSource != ''">
			and p.project_source = #{projectSource}
		</if>
		<if test="ratingStage !=null and ratingStage != ''">
			and aprl.rating_stage = #{ratingStage}
		</if>
		<if test="stage !=null and stage != ''">
			and statemp.stage = #{stage}
		</if>
		<if test="followStatus !=null and followStatus != ''">
			and pfs.meta_follow_status_id = #{followStatus}
		</if>
		GROUP BY p.short_name ) temp
    </select>
    
    <select id="findProjectByUserId" resultType="java.util.HashMap">
        <!-- SELECT b.id ID,b.short_name,b.kernel_desc,b.`city`,b.`segmentation`,b.stage
         FROM follow a LEFT JOIN view_projects_info b ON a.`projects_id` = b.`ID`
         WHERE a.user_id = #{userId}  AND a.`status` = 1-->

        SELECT mf.id ID,mf.short_name,mf.kernel_desc,mf.`city`,ps.segmentation_name segementation ,
        pfl.stage
        FROM follow a LEFT JOIN projects mf ON a.`projects_id` = mf.`ID`
        RIGHT JOIN project_segmentation ps on ps.project_id = mf.id
        left join project_financing_log pfl on pfl.project_id = mf.id
        WHERE a.user_id = #{userId} AND a.`status` = 1
        GROUP BY mf.`id` ORDER BY a.create_time DESC LIMIT #{beginNum},#{pageSize}
    </select>
    <!-- <select id="findProjectByShortName" parameterType="String" resultMap="BaseResultMap" >
     SELECT p.*,s.* FROM projects p LEFT JOIN (SELECT ff.* FROM follow ff WHERE ff.ID IN(SELECT MAX(f.ID) FROM follow f GROUP BY  f.projects_id)) s ON p.ID=s.projects_id WHERE p.`short_name` LIKE '%"#{shortName}"%';
   </select> -->
    <select id="findProjectByShortNameAll" resultType="java.util.HashMap">
        <!-- SELECT b.*,
        (SELECT COUNT(*) FROM follow a WHERE a.projects_id = b.`ID` AND a.status = 1)num,
        (SELECT MAX(f.status)s FROM follow f WHERE f.user_id = #{userId,jdbcType=VARCHAR}) AND f.projects_id = b.`ID` GROUP BY f.projects_id ) zz
        FROM projects b
        WHERE short_name LIKE CONCAT('%',#{shortName,jdbcType=VARCHAR},'%')  -->
        SELECT ID, short_name, kernel_desc,city,segementation, stage FROM (
        SELECT mf.id ID,mf.short_name,mf.kernel_desc,mf.city, ps.segmentation_name segementation ,
        pfl.stage,mf.evaluation_recommend FROM projects mf RIGHT JOIN project_segmentation ps ON ps.project_id = mf.id
        LEFT JOIN project_financing_log pfl ON mf.id = pfl.project_id WHERE mf.short_name like
        CONCAT('%',#{shortName,jdbcType=VARCHAR},'%')
        UNION ALL
        SELECT mf.id ID,mf.short_name,mf.kernel_desc,mf.city, ps.segmentation_name segementation ,
        pfl.stage,mf.evaluation_recommend FROM projects mf RIGHT JOIN project_segmentation ps ON ps.project_id = mf.id
        LEFT JOIN project_financing_log pfl ON mf.id = pfl.project_id WHERE ps.segmentation_name like
        CONCAT('%',#{shortName,jdbcType=VARCHAR},'%')
        UNION ALL
        SELECT mf.id ID,mf.short_name,mf.kernel_desc,mf.city, ps.segmentation_name segementation ,
        pfl.stage,mf.evaluation_recommend FROM projects mf RIGHT JOIN project_segmentation ps ON ps.project_id = mf.id
        LEFT JOIN project_financing_log pfl ON mf.id = pfl.project_id WHERE mf.kernel_desc LIKE
        CONCAT('%',#{shortName,jdbcType=VARCHAR},'%')
        UNION ALL
        SELECT mf.id ID,mf.short_name,mf.kernel_desc,mf.city, ps.segmentation_name segementation ,
        pfl.stage,mf.evaluation_recommend FROM projects mf RIGHT JOIN project_segmentation ps ON ps.project_id = mf.id
        LEFT JOIN project_financing_log pfl ON mf.id = pfl.project_id WHERE mf.item_label LIKE
        CONCAT('%',#{shortName,jdbcType=VARCHAR},'%')
        ) a
        GROUP BY a.short_name , a.stage
        ORDER BY a.evaluation_recommend DESC LIMIT #{sizea},#{froma}
    </select>
    <select id="findProjectByShortName" parameterType="String" resultType="java.util.HashMap">
        <!-- SELECT mf.id ID,mf.short_name,mf.kernel_desc,mf.`city`,mf.`segmentation`,stage.stage
         FROM projects mf
         LEFT JOIN (SELECT s.project_id,s.stage,s.financing_time FROM project_financing_log s GROUP BY s.`project_id` ORDER BY financing_time DESC)stage ON mf.`id` = stage.project_id
         WHERE
         mf.short_name LIKE CONCAT('%',#{shortName,jdbcType=VARCHAR},'%')
         OR mf.kernel_desc LIKE CONCAT('%',#{shortName,jdbcType=VARCHAR},'%')
         OR mf.id IN (SELECT project_id FROM project_segmentation WHERE segmentation_name LIKE CONCAT('%',#{shortName,jdbcType=VARCHAR},'%'))
         OR mf.id IN
         (SELECT project_id FROM project_financing_log WHERE stage  LIKE CONCAT('%',#{shortName,jdbcType=VARCHAR},'%'))
         OR mf.city LIKE CONCAT('%',#{shortName,jdbcType=VARCHAR},'%')
         OR mf.id IN (SELECT f.project_id FROM founders_work fw LEFT JOIN founders f ON fw.founder_id = f.id WHERE fw.work_experience LIKE CONCAT('%',#{shortName,jdbcType=VARCHAR},'%'))
         OR mf.id IN (SELECT f.project_id FROM founders_education fe LEFT JOIN founders f ON fe.founder_id = f.id WHERE fe.education_experience LIKE CONCAT('%',#{shortName,jdbcType=VARCHAR},'%'))
         GROUP BY mf.id LIMIT 3-->

        SELECT ID, short_name, kernel_desc,city,segementation, stage FROM (
        SELECT mf.id ID,mf.short_name,mf.kernel_desc,mf.city, ps.segmentation_name segementation ,
        pfl.stage,mf.evaluation_recommend FROM projects mf RIGHT JOIN project_segmentation ps ON ps.project_id = mf.id
        LEFT JOIN project_financing_log pfl ON mf.id = pfl.project_id WHERE mf.short_name like
        CONCAT('%',#{shortName,jdbcType=VARCHAR},'%')
        UNION ALL
        SELECT mf.id ID,mf.short_name,mf.kernel_desc,mf.city, ps.segmentation_name segementation ,
        pfl.stage,mf.evaluation_recommend FROM projects mf RIGHT JOIN project_segmentation ps ON ps.project_id = mf.id
        LEFT JOIN project_financing_log pfl ON mf.id = pfl.project_id WHERE ps.segmentation_name like
        CONCAT('%',#{shortName,jdbcType=VARCHAR},'%')
        UNION ALL
        SELECT mf.id ID,mf.short_name,mf.kernel_desc,mf.city, ps.segmentation_name segementation ,
        pfl.stage,mf.evaluation_recommend FROM projects mf RIGHT JOIN project_segmentation ps ON ps.project_id = mf.id
        LEFT JOIN project_financing_log pfl ON mf.id = pfl.project_id WHERE mf.kernel_desc LIKE
        CONCAT('%',#{shortName,jdbcType=VARCHAR},'%')
        UNION ALL
        SELECT mf.id ID,mf.short_name,mf.kernel_desc,mf.city, ps.segmentation_name segementation ,
        pfl.stage,mf.evaluation_recommend FROM projects mf RIGHT JOIN project_segmentation ps ON ps.project_id = mf.id
        LEFT JOIN project_financing_log pfl ON mf.id = pfl.project_id WHERE mf.item_label LIKE
        CONCAT('%',#{shortName,jdbcType=VARCHAR},'%')
        ) a
        GROUP BY short_name,stage
        ORDER BY a.evaluation_recommend DESC LIMIT 3
    </select>

    <select id="findProjectBySegmentation" parameterType="com.lhjl.tzzs.proxy.dto.SereachDto" resultType="java.util.HashMap">
        SELECT mf.id ID,mf.short_name,mf.kernel_desc,mf.`city`,mf.`segmentation` segementation,mf.stage
        FROM view_segemention_info mf
        where 1=1

        <if test=" types !='' and types != null">
            AND mf.investment_institutions_type IN
            <foreach close=")" collection="types" index="index" item="item" open="(" separator=",">#{item}</foreach>
        </if>
        <if test=" segmentations !='' and segmentations != null">
            AND mf.segmentation IN
            <foreach close=")" collection="segmentations" index="index" item="item" open="(" separator=",">#{item}
            </foreach>
        </if>

        <if test=" stages !='' and stages != null">
            AND mf.stage IN
            <foreach close=")" collection="stages" index="index" item="item" open="(" separator=",">#{item}</foreach>
        </if>

        GROUP BY mf.id LIMIT #{sizea},#{froma}
    </select>

    <select id="findProjectBySview" parameterType="com.lhjl.tzzs.proxy.dto.SereachDto" resultType="java.util.HashMap">
        SELECT mf.id ID,mf.short_name,mf.kernel_desc,mf.`city`,mf.`segmentation` segementation,mf.evaluation_recommend,
        (SELECT stage FROM project_financing_log WHERE project_id = mf.`id` ORDER BY financing_time DESC LIMIT 1)stage
        FROM projects mf
        WHERE 1=1
        AND mf.id IN(SELECT a.project_id FROM project_financing_log a WHERE a.financing_time &gt; '2017-01-01')
        <if test=" types !='' and types != null">
            AND mf.`investment_institutions_id` IN (SELECT id FROM investment_institutions WHERE `type` IN
            <foreach close=")" collection="types" index="index" item="item" open="(" separator=",">#{item}</foreach>
            )
        </if>
        <if test=" segmentations !='' and segmentations != null">
            AND mf.id IN (SELECT project_id FROM project_segmentation WHERE segmentation_name IN
            <foreach close=")" collection="segmentations" index="index" item="item" open="(" separator=",">#{item}
            </foreach>
            )
        </if>

        <if test=" stages !='' and stages != null">
            AND mf.id IN (SELECT project_id FROM project_financing_log WHERE stage IN
            <foreach close=")" collection="stages" index="index" item="item" open="(" separator=",">#{item}</foreach>
            )
        </if>

        <if test=" cities !='' and cities != null ">
            AND mf.city IN
            <foreach close=")" collection="cities" index="index" item="item" open="(" separator=",">#{item}</foreach>
        </if>

        <if test=" working_background_descs!='' and working_background_descs != null">
            AND mf.id IN (SELECT f.project_id FROM founders_work fw LEFT JOIN founders f ON fw.founder_id = f.id WHERE
            fw.work_experience IN
            <foreach close=")" collection="working_background_descs" index="index" item="item" open="(" separator=",">
                #{item}
            </foreach>
            )
        </if>

        <if test="educational_background_descs!='' and educational_background_descs!= null">
            AND mf.id IN (SELECT f.project_id FROM founders_education fe LEFT JOIN founders f ON fe.founder_id = f.id
            WHERE fe.education_experience IN
            <foreach close=")" collection="educational_background_descs" index="index" item="item" open="(" separator=",">#{item}
            </foreach>
            )
        </if>
        GROUP BY mf.short_name,stage
        ORDER BY mf.evaluation_recommend DESC
        LIMIT #{sizea},#{froma}
    </select>

    <select id="findByTodayProjects" parameterType="com.lhjl.tzzs.proxy.model.Projects" resultMap="BaseResultMap">
        select * from projects where investment_institutions_id =#{investmentInstitutionsId} and short_name =#{shortName} and to_days(create_time) = to_days(now())
    </select>

    <select id="maxSerialNumber" resultMap="BaseResultMap">
        select * from projects where serial_number between 100000 and 200000 order by serial_number desc
        limit 0,1;
    </select>


    <select id="findProjectBySviewA" resultType="java.util.HashMap">
        SELECT mf.id ID ,mf.short_name,mf.kernel_desc,mf.`city`,mf.`segmentation` segementation,mf.evaluation_recommend,
        (SELECT stage FROM project_financing_log WHERE project_id = mf.`id` ORDER BY financing_time DESC LIMIT 1) stage
        FROM projects mf
        WHERE 1=1
        AND mf.id IN(SELECT a.project_id FROM project_financing_log a WHERE a.financing_time BETWEEN '2017-01-01' AND
        '2017-06-30' and stage IN('天使轮','种子轮','Pre-A轮'))

        <if test=" types !='' and types != null">
            AND mf.`investment_institutions_id` IN (SELECT id FROM investment_institutions WHERE `type` IN
            <foreach close=")" collection="types" index="index" item="item" open="(" separator=",">#{item}</foreach>
            )
        </if>
        <if test=" segmentations !='' and segmentations != null">
            AND mf.id IN (SELECT project_id FROM project_segmentation WHERE segmentation_name IN
            <foreach close=")" collection="segmentations" index="index" item="item" open="(" separator=",">#{item}
            </foreach>
            )
        </if>

        <!-- <if test=" stages !='' and stages != null">
             AND mf.id IN (SELECT project_id FROM project_financing_log WHERE stage IN
             <foreach item="item" index="index" collection="stages" open="(" separator="," close=")">#{item}</foreach>
             )
         </if>-->

        <if test=" cities !='' and cities != null ">
            AND mf.city IN
            <foreach close=")" collection="cities" index="index" item="item" open="(" separator=",">#{item}</foreach>
        </if>

        <if test=" working_background_descs!='' and working_background_descs != null">
            AND mf.id IN (SELECT f.project_id FROM founders_work fw LEFT JOIN founders f ON fw.founder_id = f.id WHERE
            fw.work_experience IN
            <foreach close=")" collection="working_background_descs" index="index" item="item" open="(" separator=",">
                #{item}
            </foreach>
            )
        </if>

        <if test="educational_background_descs!='' and educational_background_descs!= null">
            AND mf.id IN (SELECT f.project_id FROM founders_education fe LEFT JOIN founders f ON fe.founder_id = f.id
            WHERE fe.education_experience IN
            <foreach close=")" collection="educational_background_descs" index="index" item="item" open="(" separator=",">#{item}
            </foreach>
            )
        </if>
        GROUP BY mf.short_name, stage
        ORDER BY mf.evaluation_recommend DESC
        LIMIT #{sizea},#{froma}
    </select>

    <!--查询机构类型-->
    <select id="findIvestmentTypeById" resultType="Integer">

        select ii.`type` from projects p
        left join project_financing_log pfl on pfl.project_id = p.ID
        left join investment_institutions_project iip on pfl.ID = iip.project_id
        left join investment_institutions ii on iip.investment_institutions_id = ii.ID
        where p.ID = #{projectsId}
        and ii.`type` = 1
        group by ii.`type`;
        <!---->
        <!--SELECT ii.type FROM projects p LEFT JOIN investment_institutions_project iip ON  iip.project_id = p.ID-->
        <!--left join investment_institutions ii on iip.investment_institutions_id = ii.ID-->
        <!--WHERE p.ID = #{projectsId}-->
        <!--group by project_id-->
    </select>

    <!--处理amount的xml-->
    <select id="findProjectAmountOfZ" resultType="java.util.HashMap">
SELECT m.short_name,f.segmentation_name,n.ID,n.stage,n.amount,n.calculation_amount_status,m.city FROM projects m RIGHT join project_financing_log n on m.ID = n.project_id right join project_segmentation f on m.ID = f.project_id where f.segmentation_name != '' and   n.amount = 0 and n.financing_time &gt;= '2017-01-01'
        group by m.full_name , n.stage    </select>

    <select id="findProjectByRoundAndE" parameterType="String" resultType="java.math.BigDecimal">
        SELECT avg(n.amount) FROM projects m left join project_financing_log n on m.ID = n.project_id right join
        project_segmentation f on m.ID = f.project_id where n.amount &gt; 0 and n.financing_time &gt;= '2016-07-01' and n.data_soruce_type_id = 7
        <if test="segmentation!='null' and segmentation != null">
            and f.segmentation_name = #{segmentation}
        </if>
        <if test="stage !='null' and stage !=null">
            and n.stage = #{stage};
        </if>
    </select>

    <select id="findProjectByRoundAndC" parameterType="String" resultType="java.math.BigDecimal">
        SELECT avg(n.amount) FROM projects m left join project_financing_log n on m.ID = n.project_id right join
        project_segmentation f on m.ID = f.project_id where n.amount &gt; 0 and n.financing_time &gt;= '2016-07-01' and n.data_soruce_type_id = 7
        <if test="stage!='null' and stage != null">
            and n.stage = #{stage}
        </if>
        <if test="city !='null' and city !=null">
            and m.city = #{city};
        </if>
    </select>

    <!--处理allmount的xml-->
    <select id="findProjectAllAmountOfZ" resultType="java.util.HashMap">
        SELECT m.short_name,f.segmentation_name,n.ID,n.stage,n.amount,n.total_amount,n.calculation_amount_status,m.city FROM projects m RIGHT join project_financing_log n on m.ID = n.project_id right join project_segmentation f on m.ID = f.project_id where  f.segmentation_name != '' and  n.total_amount = 0 and n.financing_time &gt;= '2016-07-01'
		  group by m.full_name, n.stage
		 </select>

    <select id="findProjectAllByRoundAndE" parameterType="String" resultType="java.math.BigDecimal">
        SELECT avg(n.total_amount) FROM projects m left join project_financing_log n on m.ID = n.project_id right join
        project_segmentation f on m.ID = f.project_id where n.total_amount &gt; 0 and n.financing_time &gt;= '2016-07-01' and n.data_soruce_type_id = 7
        <if test="segmentation!='null' and segmentation != null">
            and f.segmentation_name = #{segmentation}
        </if>
        <if test="stage !='null' and stage !=null">
            and n.stage = #{stage};
        </if>
    </select>

    <select id="findProjectAllByRoundAndC" parameterType="String" resultType="java.math.BigDecimal">
        SELECT avg(n.total_amount) FROM projects m left join project_financing_log n on m.ID = n.project_id right join
        project_segmentation f on m.ID = f.project_id where n.total_amount &gt; 0 and n.financing_time &gt;= '2016-07-01' and n.data_soruce_type_id = 7
        <if test="stage!='null' and stage != null">
            and n.stage = #{stage}
        </if>
        <if test="city !='null' and city != null">
            and m.city = #{city};
        </if>
    </select>


    <resultMap id="projectMap" type="com.lhjl.tzzs.proxy.dto.ProjectValuation">
        <result column="id" jdbcType="BIGINT" property="id" />
        <result column="type" jdbcType="BIGINT" property="type" />
        <result column="segmentation" jdbcType="VARCHAR" property="segmentation" />
        <result column="city" jdbcType="VARCHAR" property="city" />
        <result column="edu" jdbcType="VARCHAR" property="edu" />
        <result column="work" jdbcType="VARCHAR" property="work" />
    </resultMap>


    <select id="queryProjectValuation" parameterType="map" resultMap="projectMap">

    </select>
    <select id="findLikes" resultType="java.util.HashMap">
        SELECT mf.id ID,mf.short_name,mf.kernel_desc,mf.city, ps.segmentation_name segementation ,mf.`project_logo`,
        pfl.stage,mf.evaluation_recommend FROM projects mf RIGHT JOIN project_segmentation ps
        ON ps.project_id = mf.id LEFT JOIN project_financing_log pfl ON mf.id = pfl.project_id
        WHERE 1=1
        <if test=" educationArray !='' and educationArray != null">
            AND ps.segmentation_name IN
            <foreach close=")" collection="educationArray" index="index" item="item" open="(" separator=",">#{item}
            </foreach>

        </if>
        AND mf.city =#{city}
        <if test=" pslArray !='' and pslArray != null">
            AND pfl.stage IN
            <foreach close=")" collection="pslArray" index="index" item="item" open="(" separator=",">#{item}</foreach>
        </if>
        and mf.short_name !=#{shortName}
        GROUP BY mf.short_name, pfl.stage
        ORDER BY mf.evaluation_recommend DESC
        LIMIT 3
    </select>
    <select id="findLikesall" resultType="com.lhjl.tzzs.proxy.dto.XiangsiDto">
        SELECT mf.id ID,mf.short_name,mf.kernel_desc,mf.city, ps.segmentation_name segementation ,mf.`project_logo`,
        pfl.stage,mf.evaluation_recommend FROM projects mf RIGHT JOIN project_segmentation ps
        ON ps.project_id = mf.id LEFT JOIN project_financing_log pfl ON mf.id = pfl.project_id
        WHERE 1=1
        AND pfl.project_id != #{id}
        <if test=" educationArray !='' and educationArray != null">
            AND ps.segmentation_name IN
            <foreach close=")" collection="educationArray" index="index" item="item" open="(" separator=",">#{item}
            </foreach>

        </if>
        <if test=" projectTagArry !='' and projectTagArry != null">
            AND mf.item_label in
            <foreach close=")" collection="projectTagArry" index="index" item="item" open="(" separator=",">#{item}
            </foreach>
            <!--<foreach close="" collection="projectTagArry" index="index" item="item" open="" separator="OR"> CONCAT(CONCAT('%', #{item}), '%')</foreach>-->
        </if>
        and mf.short_name !=#{shortName}
        GROUP BY mf.short_name
        ORDER BY mf.evaluation_recommend DESC
        limit #{startPage},#{pageSize}
    </select>

    <select id="adminGetProjectListOne" resultType="java.util.HashMap">
        select
        p.ID,p.short_name,p.kernel_desc,p.project_investment_highlights,p.url,p.item_label,p.create_time,f.`name`,a.rating_stage
        from projects p
        left join admin_project_rating_log a on p.ID = a.project_id
        right join founders f on f.project_id = p.ID
        where p.project_source is null
        <if test="shortName !=null and shortName!='' ">
            and p.short_name like CONCAT(CONCAT('%', #{shortName}), '%')
        </if>
        order by create_time desc
        limit #{startNum},#{pageSize}
    </select>

    <select id="adminGetProjectListTwo" resultType="java.util.HashMap">
        select
        p.ID,p.short_name,p.kernel_desc,p.project_investment_highlights,p.url,p.item_label,p.create_time,u.actual_name,a.rating_stage
        from projects p
        left join admin_project_rating_log a on p.ID = a.project_id
        left join users u on p.userid = u.ID
        where p.project_source is not null
        <if test="shortName !=null and shortName!='' ">
            and p.short_name like CONCAT(CONCAT('%', #{shortName}), '%')
        </if>
        order by create_time desc
        limit #{startNum},#{pageSize}
    </select>
    <select id="screenInvestmentAll" resultType="INTEGER">
        select ii.id from investment_institutions ii
        left join investment_institutions_segmentation iis on iis.investment_institutions_id = ii.ID
        left join investment_institutions_stage iiss on iis.investment_institutions_id = iiss.investment_institution_id
        where 1=1
        <if test=" domains !='' and domains != null">
            AND iis.meta_segmentation_id IN
            <foreach close=")" collection="domains" index="index" item="item" open="(" separator=",">#{item}</foreach>
        </if>
        <if test=" stages !='' and stages != null">
            AND iiss.meta_project_stage_id IN
            <foreach close=")" collection="stages" index="index" item="item" open="(" separator=",">#{item}</foreach>
        </if>
        group by ii.short_name
        order by ii.count desc,ii.ID asc

        <!--select ii.ID from projects p-->
        <!--left join investment_institutions ii on p.investment_institutions_id = ii.ID-->
        <!--<if test="domains !='' and domains != null">-->
        <!--left join project_segmentation ps on ps.project_id = p.ID-->
        <!--</if>-->
        <!--<if test="stages !='' and stages != null">-->
        <!--left join project_financing_log pfl on pfl.project_id = p.ID-->
        <!--</if>-->
        <!--where p.investment_institutions_id is not null-->
        <!--<if test=" domains !='' and domains != null">-->
        <!--AND ps.segmentation_name IN-->
        <!--<foreach close=")" collection="domains" index="index" item="item" open="(" separator=",">#{item}</foreach>-->
        <!--</if>-->
        <!--<if test=" stages !='' and stages != null">-->
        <!--AND pfl.stage IN-->
        <!--<foreach close=")" collection="stages" index="index" item="item" open="(" separator=",">#{item}</foreach>-->
        <!--</if>-->
        <!--group by ii.short_name-->
        <!--order by ii.count desc,ii.ID asc-->

    </select>

    <select id="projectLastSerialNumber" resultMap="BaseResultMap">
        select * from zyy_test.projects where serial_number &gt;= 1000000 and serial_number &lt; 2000000
        order by serial_number desc
        limit 0,10;
    </select>

    <select id="findInstitutionProject" resultType="java.util.HashMap">
        select p.id,p.city,p.project_logo,p.kernel_desc,p.commet,p.short_name,
        p.full_name,pfl.stage,pfl.financing_time,pfl.financing_time_year from project_financing_log pfl
        left join projects p on pfl.project_id = p.id
        right join project_segmentation ps on ps.project_id = p.id
        right join investment_institutions_project iip  on  iip.project_id = pfl.id
        where iip.investment_institutions_id =  #{institutionId}
        and ps.segmentation_name is not null
        <if test="segmentationName != null and segmentationName.length &gt; 0">
            and ps.segmentation_name in
            <foreach close=")" collection="segmentationName" index="index" item="item" open="(" separator=",">#{item}</foreach>
        </if>
        <if test="financingTime != null and financingTime.length &gt; 0">
            and pfl.financing_time_year in
            <foreach close=")" collection="financingTime" index="index" item="item" open="(" separator=",">#{item}</foreach>
        </if>
        group by p.full_name,ps.segmentation_name
        order by pfl.financing_time desc,p.id asc
        limit #{startNum},#{pageSize}
    </select>

    <resultMap id="projectFilterMap" type="com.lhjl.tzzs.proxy.dto.ProjectResDto">
        <result column="projectId" jdbcType="INTEGER" property="projectId" />
        <result column="short_name" jdbcType="VARCHAR" property="shortName" />
        <result column="full_name" jdbcType="VARCHAR" property="fullName" />
        <result column="kernel_desc" jdbcType="VARCHAR" property="kernelDesc" />
        <result column="city" jdbcType="VARCHAR" property="city" />
        <result column="segmentation_name" jdbcType="VARCHAR" property="segmentation" />
        <result column="evaluation_recommend" jdbcType="VARCHAR" property="evaluationRecommend" />
        <result column="stage" jdbcType="VARCHAR" property="stage" />
        <result column="followNum" jdbcType="INTEGER" property="followNum" />
        <result column="interviewNum" jdbcType="INTEGER" property="interviewNum" />
        <result column="yn" jdbcType="INTEGER" property="yn" />
        <result column="project_logo" jdbcType="VARCHAR" property="projectLogo" />
        <result column="financing_time" jdbcType="VARCHAR" property="financingTime"/>
    </resultMap>

    <select id="projectFilter" parameterType="com.lhjl.tzzs.proxy.dto.ProjectReqDto" resultMap="projectFilterMap">
        select a.id as projectId,DATE_FORMAT(a.financing_time,'%Y-%m-%d') financing_time,
        a.short_name,a.full_name,a.city,a.segmentation_name,a.evaluation_recommend,a.stage,
        case WHEN b.followNum = null then 0 ELSE b.followNum END followNum,
        case WHEN c.interviewNum = null then 0 ELSE c.interviewNum END followNum,
        case WHEN b.followNum = null OR b.followNum = 0 then 0 ELSE 1 END yn,
        case WHEN d.`status` = 1 then 1 else 0 END `status`,
        case when a.kernel_desc is null or a.kernel_desc ="" then (case when a.commet is null then "" else a.commet end) else a.kernel_desc end kernel_desc
        from(
        select pp.id,pp.project_logo, pp.short_name,pp.full_name,pp.kernel_desc,pp.commet,pp.city,group_concat(distinct ps.segmentation_name) segmentation_name,pp.evaluation_recommend,pp.stage,pp.financing_time
        from
        (

        select p.id,p.project_logo, p.short_name,p.full_name,p.kernel_desc,p.commet,p.city,p.evaluation_recommend,p.segmentation,pfl.stage,max(pfl.financing_time) financing_time
        from investment_institutions_project iip
        left join investment_institutions ii on iip.investment_institutions_id = ii.id
        left join project_financing_log pfl on iip.project_id = pfl.id
        left join projects p on pfl.project_id = p.id
        where 1=1
        <if test="dataVcType != '' and dataVcType != null">
        and ii.type in (${dataVcType})
        </if>
        <if test="beginTime != '' and beginTime != null and endTime != '' and endTime != ''">
            and pfl.stage in ('种子轮','天使轮','pre-A轮')
            and pfl.financing_time between #{beginTime} and #{endTime}
        </if>
        group by pfl.project_id
        ORDER BY pfl.`financing_time` DESC

        ) pp left join (select id, name from meta_project_stage order by id desc )  mps on pp.stage = mps.name
        right join project_segmentation ps on ps.project_id = pp.id
        <if test="segmentation != '' and segmentation != null">
             and ps.segmentation_name in (${segmentation})
        </if>
        <if test="edus != '' and edus != null">
            right join (select f.project_id from founders f right join founders_education fe on fe.founder_ID = f.id
            where fe.education_experience in (${edus})) ffe on ffe.project_id = pp.id
        </if>
        <if test="works != '' and works != null">
            right join (select f.project_id from founders f right join founders_work fw on fw.founder_ID = f.id where
            fw.work_experience in (${works})) ffw on ffw.project_id = pp.id
        </if>
        where pp.short_name is not NULL and pp.short_name != ''
        <if test="city != '' and city != null">
            and pp.city in (${city})
        </if>
        <if test="stage != '' and stage != null">
            AND pp.stage in (${stage})
        </if>
        <if test="keyWords != '' and keyWords != null ">
            AND (pp.short_name like "%"#{keyWords}"%" or pp.full_name like "%"#{keyWords}"%" or pp.kernel_desc like "%"#{keyWords}"%" )
        </if>
        group by pp.short_name
        order by pp.evaluation_recommend desc
        limit #{offset},#{pageSize}
        ) a left join (select count(user_id) followNum ,projects_id from follow where `status`=1 group by projects_id) b on a.id =
        b.projects_id
        left join (select count(user_id) interviewNum ,projects_id from interview group by projects_id) c on a.id =
        c.projects_id
        left JOIN (select fo.status,projects_id,fo.user_id from   follow fo where fo.status= 1 and fo.user_id = #{token}  group by fo.projects_id,fo.user_id) d   on a.id = d.projects_id
    </select>

    <select id="projectFilterOne" parameterType="com.lhjl.tzzs.proxy.dto.ProjectReqDto" resultMap="projectFilterMap">
        select a.id as projectId,DATE_FORMAT(a.financing_time,'%Y-%m-%d') financing_time,
        a.short_name,a.full_name,a.city,a.segmentation_name,a.evaluation_recommend,a.stage,
        case WHEN b.followNum = null then 0 ELSE b.followNum END followNum,
        case WHEN c.interviewNum = null then 0 ELSE c.interviewNum END followNum,
        case WHEN b.followNum = null OR b.followNum = 0 then 0 ELSE 1 END yn,
        case WHEN d.`status` = 1 then 1 else 0 END `status`,
        case when a.kernel_desc is null or a.kernel_desc ="" then (case when a.commet is null then "" else a.commet end) else a.kernel_desc end kernel_desc
        from(
        select pp.id,pp.project_logo, pp.short_name,pp.full_name,pp.kernel_desc,pp.commet,pp.city,group_concat(distinct ps.segmentation_name) segmentation_name,pp.evaluation_recommend,pp.stage,pp.financing_time
        from
        (

        select p.id,p.project_logo, p.short_name,p.full_name,p.kernel_desc,p.commet,p.city,p.evaluation_recommend,p.project_source,p.yn,p.segmentation,pfl.stage,pfl.financing_time
        from investment_institutions_project iip
        left join investment_institutions ii on iip.investment_institutions_id = ii.id
        left join project_financing_log pfl on iip.project_id = pfl.id
        left join projects p on pfl.project_id = p.id
        where 1=1
        <if test="dataVcType != '' and dataVcType != null">
            and ii.type in (${dataVcType})
        </if>
        <if test="beginTime != '' and beginTime != null and endTime != '' and endTime != ''">
            and pfl.stage in ('种子轮','天使轮','pre-A轮')
            and pfl.financing_time between #{beginTime} and #{endTime}
        </if>
        group by pfl.project_id
        ORDER BY pfl.`financing_time` DESC

        ) pp left join (select id, name from meta_project_stage order by id desc )  mps on pp.stage = mps.name
        right join project_segmentation ps on ps.project_id = pp.id
        <if test="segmentation != '' and segmentation != null">
            and ps.segmentation_name in (${segmentation})
        </if>
        <if test="edus != '' and edus != null">
            right join (select f.project_id from founders f right join founders_education fe on fe.founder_ID = f.id
            where fe.education_experience in (${edus})) ffe on ffe.project_id = pp.id
        </if>
        <if test="works != '' and works != null">
            right join (select f.project_id from founders f right join founders_work fw on fw.founder_ID = f.id where
            fw.work_experience in (${works})) ffw on ffw.project_id = pp.id
        </if>
        where pp.short_name is not NULL and pp.short_name != ''
        <if test="city != '' and city != null">
            and pp.city in (${city})
        </if>
        <if test="stage != '' and stage != null">
            AND pp.stage in (${stage})
        </if>
        <if test="keyWords != '' and keyWords != null ">
            AND (pp.short_name like "%"#{keyWords}"%" or pp.full_name like "%"#{keyWords}"%" or pp.kernel_desc like "%"#{keyWords}"%" )
        </if>
        group by pp.short_name
        <if test="financingOrder != '' and financingOrder != null">
            order by pp.financing_time desc
        </if>
        limit #{offset},#{pageSize}
        ) a left join (select count(user_id) followNum ,projects_id from follow where `status`=1 group by projects_id) b on a.id =
        b.projects_id
        left join (select count(user_id) interviewNum ,projects_id from interview group by projects_id) c on a.id =
        c.projects_id
        left JOIN (select fo.status,projects_id,fo.user_id from   follow fo where fo.status= 1 and fo.user_id = #{token}  group by fo.projects_id,fo.user_id) d   on a.id = d.projects_id
    </select>

    <select id="projectFilterTwo" parameterType="com.lhjl.tzzs.proxy.dto.ProjectReqDto" resultMap="projectFilterMap">
        select a.id as projectId,DATE_FORMAT(a.financing_time,'%Y-%m-%d') financing_time,
        a.short_name,a.full_name,a.city,a.segmentation_name,a.evaluation_recommend,a.stage,a.project_logo,
        case WHEN b.followNum = null then 0 ELSE b.followNum END followNum,
        case WHEN c.interviewNum = null then 0 ELSE c.interviewNum END followNum,
        case WHEN b.followNum = null OR b.followNum = 0 then 0 ELSE 1 END yn,
        case WHEN d.`status` = 1 then 1 else 0 END `status`,
        case when a.kernel_desc is null or a.kernel_desc ="" then (case when a.commet is null then "" else a.commet end) else a.kernel_desc end kernel_desc
        from(
        select pp.id,pp.project_logo, pp.short_name,pp.full_name,pp.kernel_desc,pp.commet,pp.yn,pp.city,group_concat(distinct ps.segmentation_name) segmentation_name,pp.project_source,pp.evaluation_recommend,pp.stage,pp.financing_time
        from
        (

        select p.id,p.project_logo, p.short_name,p.full_name,p.kernel_desc,p.commet,p.city,p.evaluation_recommend,p.segmentation,p.project_source,p.yn,pfl.stage,pfl.financing_time
        from investment_institutions_project iip
        left join investment_institutions ii on iip.investment_institutions_id = ii.id
        left join project_financing_log pfl on iip.project_id = pfl.id
        left join projects p on pfl.project_id = p.id
        where 1=1
        <if test="dataVcType != '' and dataVcType != null">
            and ii.type in (${dataVcType})
        </if>
        <if test="beginTime != '' and beginTime != null and endTime != '' and endTime != ''">
            and pfl.stage in ('种子轮','天使轮','pre-A轮')
            and pfl.financing_time between #{beginTime} and #{endTime}
        </if>
        group by pfl.project_id
        ORDER BY pfl.`financing_time` DESC

        ) pp left join (select id, name from meta_project_stage order by id desc )  mps on pp.stage = mps.name
        right join project_segmentation ps on ps.project_id = pp.id
        <if test="segmentation != '' and segmentation != null">
            and ps.segmentation_name in (${segmentation})
        </if>
        <if test="edus != '' and edus != null">
            right join (select f.project_id from founders f right join founders_education fe on fe.founder_ID = f.id
            where fe.education_experience in (${edus})) ffe on ffe.project_id = pp.id
        </if>
        <if test="works != '' and works != null">
            right join (select f.project_id from founders f right join founders_work fw on fw.founder_ID = f.id where
            fw.work_experience in (${works})) ffw on ffw.project_id = pp.id
        </if>
        where pp.short_name is not NULL and pp.short_name != ''
        <if test="city != '' and city != null">
            and pp.city in (${city})
        </if>
        <if test="stage != '' and stage != null">
            AND pp.stage in (${stage})
        </if>
        <if test="keyWords != '' and keyWords != null ">
            AND (pp.short_name like "%"#{keyWords}"%" or pp.full_name like "%"#{keyWords}"%" or pp.kernel_desc like "%"#{keyWords}"%" )
        </if>

        <if test="financingRecently != '' and financingRecently != null">
            and pp.project_source is not null
            and pp.yn = 1
        </if>
        <!--and pfl.financing_time between #{beginTime} and #{endTime}-->
        group by pp.short_name
        <if test="financingOrder != '' and financingOrder != null">
            order by pp.financing_time desc
        </if>
        limit #{offset},#{pageSize}
        ) a left join (select count(user_id) followNum ,projects_id from follow where `status`=1 group by projects_id) b on a.id =
        b.projects_id
        left join (select count(user_id) interviewNum ,projects_id from interview group by projects_id) c on a.id =
        c.projects_id
        left JOIN (select fo.status,projects_id,fo.user_id from   follow fo where fo.status= 1 and fo.user_id = #{token}  group by fo.projects_id,fo.user_id) d   on a.id = d.projects_id

    </select>
    <select id="relatedInvestmentInstitution" parameterType="com.lhjl.tzzs.proxy.dto.ProjectReqDto" resultType="java.util.HashMap">
        select ii.id, ii.short_name,count(distinct p.id) as ct,
        case when ii.kenel_case is null OR ii.kenel_case = '' then (case when ii.`comment` is null OR ii.`comment` = '' then "" else ii.`comment` end) else ii.kenel_case end kenel_case,
        case when ii.logo is null then "" else ii.logo end logo
        from project_financing_log pfl left join projects p on pfl.project_id = p.id
        right join investment_institutions_project iip on iip.project_id = pfl.id
        left join investment_institutions ii on iip.investment_institutions_id = ii.id
        <if test="segmentation != '' and segmentation != null">
            right join project_segmentation ps on ps.project_id = p.id
            and ps.segmentation_name in (${segmentation})
        </if>
        <if test="edus != '' and edus != null">
            right join (select f.project_id from founders f right join founders_education fe on fe.founder_ID = f.id
            where fe.education_experience in (${edus})) ffe on ffe.project_id = p.id
        </if>
        <if test="works != '' and works != null">
            right join (select f.project_id from founders f right join founders_work fw on fw.founder_ID = f.id where
            fw.work_experience in (${works})) ffw on ffw.project_id = p.id
        </if>
        <if test="dataVcType != '' and dataVcType != null">
            left join (select iip.project_id from investment_institutions_project iip left join investment_institutions
            ii on iip.investment_institutions_id = ii.id and ii.type in (${dataVcType})) iid on iid.project_id = p.id
        </if>
        where p.short_name is not NULL and p.short_name != '' and p.short_name not in ('个人投资人','天使投资人')
        and ii.short_name is not null
        and ii.short_name not like "%个人%"
        and ii.short_name not like "%投资人%"
        and ii.short_name not like "%自投%"
        and ii.short_name not like "%自筹%"
        and ii.short_name not like "%以及%"
        and ii.short_name not like "%创始人%"
        <if test="city != '' and city != null">
            and p.city in (${city})
        </if>
        <if test="stage != '' and stage != null">
            AND pfl.stage in (${stage})
        </if>
        <if test="keyWords != '' and keyWords != '' ">
            AND (p.short_name like "%"#{keyWords}"%" or p.full_name like "%"#{keyWords}"%" or p.kernel_desc like "%"#{keyWords}"%" )
        </if>
        <if test="financingRecently != '' and financingRecently != null">
            and p.project_source is not null
        </if>
        <if test="beginTime != '' and beginTime != null and endTime != '' and endTime != ''">
            and pfl.financing_time between #{beginTime} and #{endTime}
        </if>
        and ii.short_name != "-"
        group BY ii.short_name
        order by ct desc
        limit #{offset},#{pageSize}
    </select>

    <resultMap id="histogramResultMap" type="com.lhjl.tzzs.proxy.dto.HistogramList">
        <result column="money" jdbcType="BIGINT" property="money" />
        <result column="dcount" jdbcType="BIGINT" property="dcount" />
        <result column="x" jdbcType="VARCHAR" property="x" />
        <result column="y" jdbcType="VARCHAR" property="y" />
    </resultMap>
    <select id="projectSearchStatistics" parameterType="com.lhjl.tzzs.proxy.dto.ProjectReqDto" resultMap="histogramResultMap">


            select  count(DISTINCT p.short_name) x , ${statisticsType} y

        from project_financing_log pfl left join projects p on pfl.project_id = p.id
        right join project_segmentation ps on ps.project_id = p.id
        <if test="segmentation != '' and segmentation != null">
            and ps.segmentation_name in (${segmentation})
        </if>

        <if test="statisticsType == 'ffe.education_experience'.toString()  or works != '' or  works != null">
            left join (select f.project_id,fe.education_experience from founders f right join founders_education fe on fe.founder_ID = f.id
             ) ffe on ffe.project_id = p.id
        </if>

        <if test="statisticsType == 'ffw.work_experience'.toString() or edus != null or edus != ''">
            left join (select f.project_id,fw.work_experience  from founders f right join founders_work fw on fw.founder_ID = f.id ) ffw on ffw.project_id = p.id
        </if>

        <if test="dataVcType != '' and dataVcType != null">
            left join (select iip.project_id from investment_institutions_project iip left join investment_institutions
            ii on iip.investment_institutions_id = ii.id and ii.type in (${dataVcType})) iid on iid.project_id = p.id
        </if>
        <where> p.short_name is not NULL and p.short_name != ''
        <if test="city != '' and city != null">
            and p.city in (${city})
        </if>
        <if test="stage != '' and stage != null">
            AND pfl.stage in (${stage})
        </if>
            <if test="works != '' and works != null">
            AND
                ffw.work_experience in (${works})
        </if>
            <if test="edus != '' and edus != null">
            AND
                ffe.education_experience in (${edus})
        </if>
        <if test="keyWords != '' and keyWords != null ">
            AND (p.short_name like "%"#{keyWords}"%" or p.full_name like "%"#{keyWords}"%" or p.kernel_desc like "%"#{keyWords}"%" )
        </if>
        <if test="beginTime != '' and beginTime != null and endTime != '' and endTime != ''">

            and pfl.financing_time between #{beginTime} and #{endTime}
        </if>
            and ${statisticsType} is not null and ${statisticsType} != ''
        </where>
        GROUP BY ${statisticsType}
        ORDER BY x desc
        limit #{offset},#{pageSize}
    </select>
    
    <select id="getLogoAndOtherInfoById" resultType="java.util.HashMap">
        SELECT  p.id,p.short_name,p.project_logo,aprl.rating_stage,mfs.status_name,pau.admin_name
        FROM projects p
        left join admin_project_rating_log aprl on p.ID = aprl.project_id
        left join project_follow_status pfs on p.ID = pfs.project_id
        left join meta_follow_status mfs on pfs.meta_follow_status_id = mfs.id
        left join (select pa.projects_id,group_concat(au.admin_name) admin_name from(
        select *
        from project_administrator
        group by projects_id,user_id
        order by id ) pa
        left join (select u.id,case when u.actual_name is null then uw.nick_name else u.actual_name end admin_name
        from users u
        left join users_weixin uw on u.id = uw.user_id) au on pa.user_id = au.id
        group by projects_id)pau on p.id = pau.projects_id
        where p.id = #{projectId}
    </select>
    <select id="getBaseInfoById" resultType="java.util.HashMap">
        SELECT
        p.id,p.full_name,p.kernel_desc,p.url,p.item_label,cpn.competitive_products_name,ps.segmentation_name,
        p.established_time,p.company_email,p.city,p.company_hr_email,p.address,p.territory,
        case when p.foreign_investment_yn = 1 then "是" else "否" end foreign_investment_yn
        FROM
        projects p
        LEFT JOIN
        (SELECT project_id,GROUP_CONCAT(competitive_products_name) competitive_products_name
        FROM
        project_competitive_products
        GROUP BY project_id) cpn ON p.id = cpn.project_id
        LEFT JOIN
        (SELECT project_id,GROUP_CONCAT(segmentation_name) segmentation_name
        FROM
        project_segmentation
        GROUP BY project_id) ps ON p.id = ps.project_id
        where p.id = #{projectId}
    </select>

    <select id="selectByCaseName" resultMap="BaseResultMap">
        select * from projects where 1=1
        <if test="inputWord !=null and inputWord !=''">
            and short_name like concat(concat("%",#{inputWord}),"%")
        </if>
        limit 0,30;
    </select>
    
    <select id="projectHighQuality" resultMap="projectFilterMap">

        select a.id as projectId,a.stage,a.short_name,a.full_name,a.city,a.segmentation_name,a.evaluation_recommend,
        case when a.project_logo is null then "" else a.project_logo end project_logo,
        case WHEN b.followNum is null then 0 ELSE b.followNum END followNum,
        case WHEN c.interviewNum is null then 0 ELSE c.interviewNum END interviewNum,
        case WHEN b.followNum is null OR b.followNum = 0 then 0 ELSE 1 END yn,
        case WHEN d.`status` = 1 then 1 else 0 END `status`,
        case when a.kernel_desc is null or a.kernel_desc ="" then (case when a.commet is null then "" else a.commet end) else a.kernel_desc end kernel_desc
        from(
        select p.id,ppss.stage,p.project_logo,p.short_name,p.full_name,group_concat(ps.segmentation_name) segmentation_name,p.kernel_desc,p.commet,p.city,p.evaluation_recommend from(
        select f.projects_id from(
        select ut.token from investors ivs
        left join users u on ivs.user_id = u.ID
        left join user_token ut on u.ID = ut.user_id
        where ivs.yn = 1 and ivs.approval_status != 0 and ut.token is not null
        ) aa
        left join follow f on aa.token = f.user_id
        where f.projects_id is not null and f.status =1 group by f.projects_id
        ) bb
        left join projects p on bb.projects_id = p.ID
        right join project_segmentation ps on p.id = ps.project_id

        left join (select * from(
        select pfl.* from project_financing_log pfl
        left join projects p on pfl.project_id = p.ID
        where pfl.project_id is not null
        and pfl.stage is not null
        order by pfl.financing_time desc) hh
        group by hh.project_id) ppss on p.id = ppss.project_id
        where p.short_name is not null
        group by p.short_name
        )a
        left join (select count(user_id) followNum ,projects_id from follow where `status`=1 group by projects_id) b on a.id = b.projects_id
        left join (select count(user_id) interviewNum ,projects_id from interview group by projects_id) c on a.id = c.projects_id
        left JOIN (select fo.status,projects_id,fo.user_id from follow fo where fo.status= 1 and fo.user_id = #{userToken}
        group by fo.projects_id,fo.user_id) d on a.id = d.projects_id
        order by a.evaluation_recommend desc
        limit #{startPage},#{pageSize}

    </select>

    <select id="selectByProjectShortName" parameterType="java.lang.String" resultMap="BaseResultMap">
      select * from projects from `short_name`=#{searchWord};
    </select>
</mapper>